@page "/recipes/manage"
@using System.Security.Claims
@using RecipeBook.Web.Data
@using Microsoft.AspNetCore.Authorization
@using RecipeBook.Web.Services
@rendermode InteractiveServer
@attribute [Authorize]
@inject AppDbContext Db
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthState
@inject IJSRuntime JS
@inject RecipeService RecipeService

<h3>My Recipes</h3>

<div class="mb-3 d-flex">
    <a class="btn btn-primary" href="/recipes/new">
        <i class="fas fa-plus me-2"></i>Create Recipe
    </a>
</div>

@if (isLoading)
{
    <div class="loading-spinner text-center">
        <i class="fas fa-spinner fa-spin fa-2x me-2"></i>
        <p>Loading recipes...</p>
    </div>
}
else if (!recipes.Any())
{
    <div class="no-recipes text-center">
        <i class="fas fa-utensils fa-3x mb-3"></i>
        <p>No recipes yet. <a href="/recipes/new" class="text-decoration-underline">Create the first one!</a></p>
    </div>
}
else
{
    <div class="row">
        @foreach (var recipe in recipes)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card recipe-card h-100">
                    @if (!string.IsNullOrEmpty(recipe.ImagePath))
                    {
                        <img src="@recipe.ImagePath" class="card-img-top recipe-image" alt="@recipe.Title" style="height: 200px; object-fit: cover;">
                    }
                    else
                    {
                        <div class="card-img-top recipe-image-placeholder d-flex align-items-center justify-content-center" style="height: 200px;">
                            <i class="fas fa-utensils fa-3x text-muted"></i>
                        </div>
                    }
                    
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@recipe.Title</h5>
                        <p class="card-text">
                            <span class="badge bg-primary">@recipe.Category</span>
                        </p>
                        <p class="card-text text-muted small">
                            <i class="fas fa-clock me-1"></i>
                            Created @recipe.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")
                        </p>
                        
                        <div class="mt-auto">
                            <div class="d-flex justify-content-between align-items-center">
                                <a href="/recipes/@recipe.Id" class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-book-open me-1"></i>View
                                </a>
                                
                                @if (CanManage(recipe))
                                {
                                    <div>
                                        <button class="btn btn-outline-primary btn-sm me-1" @onclick="() => GoEdit(recipe.Id)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => Delete(recipe.Id)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Recipe> recipes = new();
    private bool isLoading = true;
    private string? currentUserId;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var user = auth.User;

        currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        isAdmin = user.IsInRole("Admin");

        // Use RecipeService to get recipes
        recipes = await RecipeService.GetAllRecipesAsync();
        
        // Filter to user's recipes if not admin
        if (!isAdmin)
        {
            recipes = recipes.Where(r => r.OwnerId == currentUserId).ToList();
        }
        
        isLoading = false;
    }

    private bool CanManage(Recipe r) => isAdmin || r.OwnerId == currentUserId;

    private void GoEdit(int id) => Nav.NavigateTo($"/recipes/edit/{id}");

    private async Task Delete(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this recipe?");
        if (!confirm) return;

        var entity = await Db.Recipes.FindAsync(id);
        if (entity is null) return;
        if (!CanManage(entity)) return;

        Db.Recipes.Remove(entity);
        await Db.SaveChangesAsync();

        // refresh in-memory list
        recipes.RemoveAll(x => x.Id == id);
        StateHasChanged();
    }
}