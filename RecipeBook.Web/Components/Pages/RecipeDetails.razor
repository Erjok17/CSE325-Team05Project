@page "/recipes/{id:int}"
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using RecipeBook.Web.Data
@attribute [Authorize]
@inject AppDbContext Db
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthState
@inject IJSRuntime JS

@if (isLoading)
{
    <p><em>Loading…</em></p>
}
else if (notFound)
{
    <div class="alert alert-danger">Recipe not found.</div>
}
else
{
    <div class="card shadow-sm p-4 bg-light-subtle">
        <div class="d-flex justify-content-between align-items-start">
            <div>
                <h2 class="mb-1">@recipe!.Title</h2>
                @if (!string.IsNullOrWhiteSpace(recipe!.Category))
                {
                    <span class="badge bg-primary">@recipe!.Category</span>
                }
            </div>

            @if (canManage)
            {
                <div>
                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="EditThis">Edit</button>
                    <button class="btn btn-sm btn-outline-danger" @onclick="DeleteRecipe">Delete</button>
                </div>
            }
        </div>

        <hr />

        <h5>Ingredients</h5>
        @if (!string.IsNullOrWhiteSpace(recipe!.Ingredients))
        {
            <ul>
                @foreach (var line in SplitLines(recipe!.Ingredients!))
                {
                    <li>@line</li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted">No ingredients listed.</p>
        }

        <h5 class="mt-4">Steps</h5>
        @if (!string.IsNullOrWhiteSpace(recipe!.Steps))
        {
            <ol>
                @foreach (var step in SplitLines(recipe!.Steps!))
                {
                    <li>@step</li>
                }
            </ol>
        }
        else
        {
            <p class="text-muted">No steps provided.</p>
        }

        <hr />
        <small class="text-muted d-block mb-2">
            Created: @recipe!.CreatedAt.ToLocalTime().ToString("g")
        </small>
        <small class="text-muted d-block">
            Updated: @recipe!.UpdatedAt.ToLocalTime().ToString("g")
        </small>

        <div class="mt-3">
            <button class="btn btn-secondary" @onclick="BackToList">← Back to list</button>
        </div>
    </div>
}

@code {
    [Parameter] public int id { get; set; }

    private Recipe? recipe;
    private bool isLoading = true;
    private bool notFound = false;
    private bool canManage = false;
    private string? currentUserId;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var user = auth.User;
        currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        isAdmin = user.IsInRole("Admin");

        recipe = await Db.Recipes.FindAsync(id);

        if (recipe is null)
        {
            notFound = true;
            isLoading = false;
            return;
        }

        canManage = isAdmin || recipe.OwnerId == currentUserId;
        isLoading = false;
    }

    private IEnumerable<string> SplitLines(string text)
        => text.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
               .Select(s => s.Trim())
               .Where(s => !string.IsNullOrWhiteSpace(s));

    private void EditThis()
    {
        if (recipe is null) return;
        Nav.NavigateTo($"/recipes/edit/{recipe.Id}");
    }

    private void BackToList() => Nav.NavigateTo("/recipes");

    private async Task DeleteRecipe()
    {
        if (recipe is null || !canManage) return;
        var ok = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this recipe?");
        if (!ok) return;

        Db.Recipes.Remove(recipe);
        await Db.SaveChangesAsync();
        Nav.NavigateTo("/recipes");
    }
}
