@* @page "/recipes"
@using RecipeBook.Web.Data
@inject AppDbContext Db

<h3>Recipes</h3>

<div class="mb-3">
    <AuthorizeView>
        <Authorized>
            <a class="btn btn-sm btn-primary" href="/recipes/new">➕ Create Recipe</a>
        </Authorized>
    </AuthorizeView>
</div>

@if (recipes is null)
{
    <p><em>Cargando…</em></p>
}
else if (!recipes.Any())
{
    <p>No recipes yet.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Category</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var r in recipes)
        {
            <tr>
                <td>@r.Title</td>
                <td>@r.Category</td>
                <td>@r.CreatedAt.ToLocalTime().ToString("g")</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Recipe>? recipes;

    protected override void OnInitialized()
    {
        recipes = Db.Recipes
            .OrderByDescending(r => r.CreatedAt)
            .ToList();
    }
} *@



@page "/recipes"
@using System.Security.Claims
@using RecipeBook.Web.Data
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]
@inject AppDbContext Db
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthState
@inject IJSRuntime JS

<h3>Recipes</h3>

<div class="mb-3 d-flex">
    <AuthorizeView>
        <Authorized>
            <a class="btn btn-sm btn-primary" href="/recipes/new">➕ Create Recipe</a>
        </Authorized>
    </AuthorizeView>
</div>

@if (isLoading)
{
    <p><em>Loading…</em></p>
}
else if (!recipes.Any())
{
    <p>No recipes yet.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th style="width:36%">Title</th>
            <th style="width:24%">Category</th>
            <th style="width:24%">Created</th>
            <th style="width:16%"></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var r in recipes)
        {
            <tr>
                <td>@r.Title</td>
                <td>@r.Category</td>
                <td>@r.CreatedAt.ToLocalTime().ToString("g")</td>
                <td class="text-end">
                    @if (CanManage(r))
                    {
                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => GoEdit(r.Id)">Edit</button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(r.Id)">Delete</button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Recipe> recipes = new();
    private bool isLoading = true;
    private string? currentUserId;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var user = auth.User;

        currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        isAdmin = user.IsInRole("Admin");

        IQueryable<Recipe> q = Db.Recipes.OrderByDescending(r => r.CreatedAt);
        if (!isAdmin)
            q = q.Where(r => r.OwnerId == currentUserId).OrderByDescending(r => r.CreatedAt);

        recipes = q.ToList();
        isLoading = false;
    }

    private bool CanManage(Recipe r) => isAdmin || r.OwnerId == currentUserId;

    private void GoEdit(int id) => Nav.NavigateTo($"/recipes/edit/{id}");

    private async Task Delete(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this recipe?");
        if (!confirm) return;

        var entity = await Db.Recipes.FindAsync(id);
        if (entity is null) return;
        if (!CanManage(entity)) return;

        Db.Recipes.Remove(entity);
        await Db.SaveChangesAsync();

        // refresh in-memory list
        recipes.RemoveAll(x => x.Id == id);
        StateHasChanged();
    }
}
